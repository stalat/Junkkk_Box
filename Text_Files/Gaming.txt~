pygame.init()														#Initialize the pygame module
disp = pygame.display.set_mode(tuple)											#Create the screen of given size
pygame.display.set_caption(string)											#Sets the title bar 
pygame.event.get()												        #Have all the events, happen over Games.
disp.fill('r', 'g', 'b')												#It will fill the screen with Color
pygame.display.update()													#update the screen whenever the loops run
pygame.draw.line(DISPLAYSURF, BLUE, (60, 60), (120, 60), 4) <screen,color,start,end, width>				#Draws a line
pygame.draw.circle(DISPLAYSURF, BLUE, (300, 50), 20, 0)	<screen,color,center_point,radius,width>			#Draws a circle
pygame.draw.ellipse(DISPLAYSURF, RED, (300, 250, 40, 80), 1) <screen,color,bounding_rectangle, width>			#Draws an Ellipse
pygame.draw.polygon(DISPLAYSURF, GREEN, ((146, 0),(291,106),(236, 277),(56, 277),(0, 106)))<surface,color,points,width>	#Draws a Polygon
pygame.draw.rect(DISPLAYSURF, RED, (200, 150, 100, 50))	<screen,color,rectangle_tuple,width>				#Draws a Rect
pixObj = pygame.PixelArray(DISPLAYSURF)											#Creates a pixel object
pixObj[480][380] = BLACK												#Draws the Pixel
When you create the pixel object; The surface get locked and we can't draw images on locked surface, So We need to del the pixel Object in order to unlock the screen.
To check whether the screen is locked or not, I need to use get_locked(). DISPLAYSURF.get_locked()
Linux-->  

	yum install python-devel SDL_image-devel SDL_mixer-devel SDL_ttf-devel SDL-devel smpeg-devel numpy subversion portmidi-devel
	hg clone https://bitbucket.org/pygame/pygame
	cd pygame
	sudo python setup.py install


Now the Pygame has been installed and can start working on it.

	import sys, pygame					#Importing the pygame module
	pygame.init()						#Initializing the PyGame module
	screen = pygame.display.set_mode()			#The Screen that will be displayed as a gaming Window.Size can be set in form of a list in set_mode(size)
	image =  pygame.image.load('full_path_to_image')	#It will load the given image to image named variable
	imagerect = image.get_rect()				#Representing a rectangular area

Now My Display screen is ready and Image is ready and rectangular area is ready; What If I want to x down<close> my screen.
	So, I'll have to check whether that event is called or not; and that I can find easliy as:
		
			for event in pygame.event.get():
				if event.type == pygame.QUIT: sys.exit()		
	


	For Example:
			import sys, pygame
			pygame.init()

			size = width, height = 320, 240
			speed = [1, 1]
			black = 10, 100, 0

			screen = pygame.display.set_mode()

			ball = pygame.image.load("/home/stalat/Desktop/ball.gif")
			ballrect = ball.get_rect()

			while 1:
				for event in pygame.event.get():
					if event.type == pygame.QUIT: sys.exit()

				ballrect = ballrect.move(speed)
				if ballrect.left < 0 or ballrect.right > width:
					speed[0] = -speed[0]
				if ballrect.top < 0 or ballrect.bottom > height:
					speed[1] = -speed[1]

				screen.fill(black)
				screen.blit(ball, ballrect)
				pygame.display.flip()

	We use the blit method for copying pixels from one image to another.
	When we're done with all, We need to display what we've drawn; So we're calling pygame.display.flip()
	

The Modules for PyGame are:
	cdrom
	cursors
	display
	draw
	event
	font
	image
	joystick
	key
	mouse
	movie
	sndarray
	surfarray
	time
	transform



Now its time to start from the very Basic:

	import pygame, sys				
	from pygame.locals import *
	pygame.init()
	displaysurf = pygame.display.set_mode((400,300))					#It will create the screen
	pygame.display.set_caption("Hello Wolrd!!!")						#It will create the caption for the screen
	while True:
		for event in pygame.event.get():
			if event.type == QUIT:
				pygame.quit()
				sys.exit()
		pygame.display.update()



Now coming to the graphics part; it's like that only:

			import os, pygame, time
			from pygame.locals import *
			pygame.init()
			DISPLAYSURF = pygame.display.set_mode((500, 400), 0, 32)
			pygame.display.set_caption("This is performed")
			BLACK = ( 0, 0, 0)
			WHITE = (255, 255, 255)
			RED = (255, 0, 0)
			GREEN = ( 0, 255, 0)
			BLUE = ( 0, 0, 255)
			# Draw on surface object
			DISPLAYSURF.fill(WHITE)
			pygame.draw.polygon(DISPLAYSURF, GREEN, ((146, 0), (291, 106), (236, 277),(56, 277), (0, 106)))
			pygame.draw.line(DISPLAYSURF, BLUE, (60, 60), (120, 60), 4)
			pygame.draw.line(DISPLAYSURF, BLUE, (120, 60), (60, 120))
			pygame.draw.line(DISPLAYSURF, BLUE, (60, 120), (120, 120), 4)
			pygame.draw.circle(DISPLAYSURF, BLUE, (300, 50), 20, 0)
			pygame.draw.ellipse(DISPLAYSURF, RED, (300, 250, 40, 80), 1)
			pygame.draw.rect(DISPLAYSURF, RED, (200, 150, 100, 50))
			pixObj = pygame.PixelArray(DISPLAYSURF)
			pixObj[480][380] = BLACK
			pixObj[482][382] = BLACK
			pixObj[484][384] = BLACK
			pixObj[486][386] = BLACK
			pixObj[488][388] = BLACK
			del pixObj

			while True:
				for event in pygame.event.get():
					if event.type == QUIT:
						pygame.exit()
						sys.exit()
					pygame.display.update()
